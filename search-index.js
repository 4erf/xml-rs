var searchIndex={};
searchIndex["xml"] = {"doc":"This crate currently provides an almost XML…","i":[[3,"ParserConfig","xml","Parser configuration structure.",null,null],[12,"trim_whitespace","","Whether or not should whitespace in textual events be…",0,null],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to…",0,null],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters.…",0,null],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",0,null],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be…",0,null],[12,"extra_entities","","A map of extra entities recognized by the parser. Default…",0,null],[12,"ignore_end_of_stream","","Whether or not the parser should ignore the end of stream.…",0,null],[3,"EmitterConfig","","Emitter configuration structure.",null,null],[12,"line_separator","","Line separator used to separate lines in formatted output.…",1,null],[12,"indent_string","","A string which will be used for a single level of…",1,null],[12,"perform_indent","","Whether or not the emitted document should be indented.…",1,null],[12,"perform_escaping","","Whether or not characters in output events will be…",1,null],[12,"write_document_declaration","","Whether or not to write XML document declaration at the…",1,null],[12,"normalize_empty_elements","","Whether or not to convert elements with empty content to…",1,null],[12,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters.…",1,null],[12,"keep_element_names_stack","","Whether or not to keep element names to support…",1,null],[12,"autopad_comments","","Whether or not to automatically insert leading and…",1,null],[0,"macros","","Contains several macros used in this crate.",null,null],[0,"name","","Contains XML qualified names manipulation types and…",null,null],[3,"Name","xml::name","Represents a qualified XML name.",null,null],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",2,null],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",2,null],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",2,null],[3,"ReprDisplay","","A wrapper around `Name` whose `Display` implementation…",null,null],[3,"OwnedName","","An owned variant of `Name`.",null,null],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",3,null],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",3,null],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",3,null],[11,"to_owned","","Returns an owned variant of the qualified name.",2,[[["self"]],["ownedname"]]],[11,"local","","Returns a new `Name` instance representing plain local name.",2,[[["str"]],["name"]]],[11,"prefixed","","Returns a new `Name` instance with the given local name…",2,[[["str"]],["name"]]],[11,"qualified","","Returns a new `Name` instance representing a qualified…",2,[[["str"],["option",["str"]]],["name"]]],[11,"to_repr","","Returns a correct XML representation of this local name…",2,[[["self"]],["string"]]],[11,"repr_display","","Returns a structure which can be displayed with `std::fmt`…",2,[[["self"]],["reprdisplay"]]],[11,"prefix_repr","","Returns either a prefix of this name or…",2,[[["self"]],["str"]]],[11,"borrow","","Constructs a borrowed `Name` based on this owned name.",3,[[["self"]],["name"]]],[11,"local","","Returns a new `OwnedName` instance representing a plain…",3,[[["s"]],["ownedname"]]],[11,"qualified","","Returns a new `OwnedName` instance representing a…",3,[[["s1"],["option"],["s2"]],["ownedname"]]],[11,"prefix_ref","","Returns an optional prefix by reference, equivalent to…",3,[[["self"]],[["str"],["option",["str"]]]]],[11,"namespace_ref","","Returns an optional namespace by reference, equivalen to…",3,[[["self"]],[["str"],["option",["str"]]]]],[0,"attribute","xml","Contains XML attributes manipulation types and functions.",null,null],[3,"Attribute","xml::attribute","A borrowed version of an XML attribute.",null,null],[12,"name","","Attribute name.",4,null],[12,"value","","Attribute value.",4,null],[3,"OwnedAttribute","","An owned version of an XML attribute.",null,null],[12,"name","","Attribute name.",5,null],[12,"value","","Attribute value.",5,null],[11,"to_owned","","Creates an owned attribute out of this borrowed one.",4,[[["self"]],["ownedattribute"]]],[11,"new","","Creates a borrowed attribute using the provided borrowed…",4,[[["name"],["str"]],["attribute"]]],[11,"borrow","","Returns a borrowed `Attribute` out of this owned one.",5,[[["self"]],["attribute"]]],[11,"new","","Creates a new owned attribute using the provided owned…",5,[[["into",["string"]],["string"],["ownedname"]],["ownedattribute"]]],[0,"common","xml","Contains common types and functions used throughout the…",null,null],[3,"TextPosition","xml::common","Represents a position inside some textual document.",null,null],[12,"row","","Row, counting from 0",6,null],[12,"column","","Column, counting from 0",6,null],[4,"XmlVersion","","XML version enumeration.",null,null],[13,"Version10","","XML version 1.0.",7,null],[13,"Version11","","XML version 1.1.",7,null],[5,"is_whitespace_char","","Checks whether the given character is a white space…",null,[[["char"]],["bool"]]],[5,"is_whitespace_str","","Checks whether the given string is compound only by white…",null,[[["str"]],["bool"]]],[5,"is_name_start_char","","Checks whether the given character is a name start…",null,[[["char"]],["bool"]]],[5,"is_name_char","","Checks whether the given character is a name character…",null,[[["char"]],["bool"]]],[8,"Position","","Get the position in the document corresponding to the object",null,null],[10,"position","","Returns the current position or a position corresponding…",8,[[["self"]],["textposition"]]],[11,"new","","Creates a new position initialized to the beginning of the…",6,[[],["textposition"]]],[11,"advance","","Advances the position in a line",6,[[["self"],["u8"]]]],[11,"advance_to_tab","","Advances the position in a line to the next tab position",6,[[["self"],["u8"]]]],[11,"new_line","","Advances the position to the beginning of the next line",6,[[["self"]]]],[0,"escape","xml","Contains functions for performing XML special characters…",null,null],[5,"escape_str_attribute","xml::escape","Performs escaping of common XML characters inside an…",null,[[["str"]],[["str"],["cow",["str"]]]]],[5,"escape_str_pcdata","","Performs escaping of common XML characters inside PCDATA.",null,[[["str"]],[["str"],["cow",["str"]]]]],[0,"namespace","xml","Contains namespace manipulation types and functions.",null,null],[3,"Namespace","xml::namespace","Namespace is a map from prefixes to namespace URIs.",null,null],[12,"0","","",9,null],[3,"NamespaceStack","","Namespace stack is a sequence of namespaces.",null,null],[12,"0","","",10,null],[3,"NamespaceStackMappings","","An iterator over mappings from prefixes to URIs in a…",null,null],[3,"CheckedTarget","","A wrapper around `NamespaceStack` which implements…",null,null],[6,"NamespaceMappings","","An alias for iterator type for namespace mappings…",null,null],[6,"UriMapping","","A type alias for a pair of `(prefix, uri)` values returned…",null,null],[17,"NS_XMLNS_PREFIX","","Designates prefix for namespace definitions.",null,null],[17,"NS_XMLNS_URI","","Designates the standard URI for `xmlns` prefix.",null,null],[17,"NS_XML_PREFIX","","Designates prefix for a namespace containing several…",null,null],[17,"NS_XML_URI","","Designates the standard URI for `xml` prefix.",null,null],[17,"NS_NO_PREFIX","","Designates the absence of prefix in a qualified name.",null,null],[17,"NS_EMPTY_URI","","Designates an empty namespace URI, which is equivalent to…",null,null],[11,"empty","","Returns an empty namespace.",9,[[],["namespace"]]],[11,"is_empty","","Checks whether this namespace is empty.",9,[[["self"]],["bool"]]],[11,"is_essentially_empty","","Checks whether this namespace is essentially empty, that…",9,[[["self"]],["bool"]]],[11,"contains","","Checks whether this namespace mapping contains the given…",9,[[["self"],["p"]],["bool"]]],[11,"put","","Puts a mapping into this namespace.",9,[[["u"],["self"],["p"]],["bool"]]],[11,"force_put","","Puts a mapping into this namespace forcefully.",9,[[["u"],["self"],["p"]],[["string"],["option",["string"]]]]],[11,"get","","Queries the namespace for the given prefix.",9,[[["self"],["p"]],[["option",["str"]],["str"]]]],[11,"empty","","Returns an empty namespace stack.",10,[[],["namespacestack"]]],[11,"default","","Returns a namespace stack with default items in it.",10,[[],["namespacestack"]]],[11,"push_empty","","Adds an empty namespace to the top of this stack.",10,[[["self"]],["namespacestack"]]],[11,"pop","","Removes the topmost namespace in this stack.",10,[[["self"]],["namespace"]]],[11,"try_pop","","Removes the topmost namespace in this stack.",10,[[["self"]],[["option",["namespace"]],["namespace"]]]],[11,"peek_mut","","Borrows the topmost namespace mutably, leaving the stack…",10,[[["self"]],["namespace"]]],[11,"peek","","Borrows the topmost namespace immutably, leaving the stack…",10,[[["self"]],["namespace"]]],[11,"put_checked","","Puts a mapping into the topmost namespace if this stack…",10,[[["u"],["self"],["p"]],["bool"]]],[11,"put","","Puts a mapping into the topmost namespace in this stack.",10,[[["u"],["self"],["p"]],["bool"]]],[11,"get","","Performs a search for the given prefix in the whole stack.",10,[[["self"],["p"]],[["option",["str"]],["str"]]]],[11,"squash","","Combines this stack of namespaces into a single namespace.",10,[[["self"]],["namespace"]]],[11,"checked_target","","Returns an object which implements `Extend` using…",10,[[["self"]],["checkedtarget"]]],[11,"iter","","Returns an iterator over all mappings in this namespace…",10,[[["self"]],["namespacestackmappings"]]],[0,"reader","xml","Contains high-level interface for a pull-based XML parser.",null,null],[3,"ParserConfig","xml::reader","Parser configuration structure.",null,null],[12,"trim_whitespace","","Whether or not should whitespace in textual events be…",0,null],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to…",0,null],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters.…",0,null],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",0,null],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be…",0,null],[12,"extra_entities","","A map of extra entities recognized by the parser. Default…",0,null],[12,"ignore_end_of_stream","","Whether or not the parser should ignore the end of stream.…",0,null],[3,"Error","","An XML parsing error.",null,null],[3,"EventReader","","A wrapper around an `std::io::Read` instance which…",null,null],[3,"Events","","An iterator over XML events created from some type…",null,null],[4,"XmlEvent","","An element of an XML input stream.",null,null],[13,"StartDocument","","Corresponds to XML document declaration.",11,null],[12,"version","xml::reader::XmlEvent","XML version.",12,null],[12,"encoding","","XML document encoding.",12,null],[12,"standalone","","XML standalone declaration.",12,null],[13,"EndDocument","xml::reader","Denotes to the end of the document stream.",11,null],[13,"ProcessingInstruction","","Denotes an XML processing instruction.",11,null],[12,"name","xml::reader::XmlEvent","Processing instruction target.",13,null],[12,"data","","Processing instruction content.",13,null],[13,"StartElement","xml::reader","Denotes a beginning of an XML element.",11,null],[12,"name","xml::reader::XmlEvent","Qualified name of the element.",14,null],[12,"attributes","","A list of attributes associated with the element.",14,null],[12,"namespace","","Contents of the namespace mapping at this point of the…",14,null],[13,"EndElement","xml::reader","Denotes an end of an XML element.",11,null],[12,"name","xml::reader::XmlEvent","Qualified name of the element.",15,null],[13,"CData","xml::reader","Denotes CDATA content.",11,null],[13,"Comment","","Denotes a comment.",11,null],[13,"Characters","","Denotes character data outside of tags.",11,null],[13,"Whitespace","","Denotes a chunk of whitespace outside of tags.",11,null],[4,"ErrorKind","","",null,null],[13,"Syntax","","",16,null],[13,"Io","","",16,null],[13,"Utf8","","",16,null],[13,"UnexpectedEof","","",16,null],[11,"new","xml","Returns a new config with default values.",0,[[],["parserconfig"]]],[11,"create_reader","","Creates an XML reader with this configuration.",0,[[["read"]],[["read"],["eventreader"]]]],[11,"add_entity","","Adds a new entity mapping and returns an updated config…",0,[[["string"],["into",["string"]]],["parserconfig"]]],[11,"trim_whitespace","","Sets the field to the provided value and returns updated…",0,[[["bool"]],["parserconfig"]]],[11,"whitespace_to_characters","","Sets the field to the provided value and returns updated…",0,[[["bool"]],["parserconfig"]]],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated…",0,[[["bool"]],["parserconfig"]]],[11,"ignore_comments","","Sets the field to the provided value and returns updated…",0,[[["bool"]],["parserconfig"]]],[11,"coalesce_characters","","Sets the field to the provided value and returns updated…",0,[[["bool"]],["parserconfig"]]],[11,"ignore_end_of_stream","","Sets the field to the provided value and returns updated…",0,[[["bool"]],["parserconfig"]]],[11,"as_writer_event","xml::reader","Obtains a writer event from this reader event.",11,[[["self"]],[["option",["xmlevent"]],["xmlevent"]]]],[11,"msg","","Returns a reference to a message which is contained inside…",17,[[["self"]],["str"]]],[11,"kind","","",17,[[["self"]],["errorkind"]]],[6,"Result","","A result type yielded by `XmlReader`.",null,null],[11,"new","","Creates a new reader, consuming the given stream.",18,[[["r"]],["eventreader"]]],[11,"new_with_config","","Creates a new reader with the provded configuration,…",18,[[["parserconfig"],["r"]],["eventreader"]]],[11,"next","","Pulls and returns next XML event from the stream.",18,[[["self"]],[["xmlevent"],["result",["xmlevent"]]]]],[11,"source","","",18,[[["self"]],["r"]]],[11,"source_mut","","",18,[[["self"]],["r"]]],[11,"into_inner","","Unwraps this `EventReader`, returning the underlying reader.",18,[[],["r"]]],[11,"into_inner","","Unwraps the iterator, returning the internal `EventReader`.",19,[[],["eventreader"]]],[11,"source","","",19,[[["self"]],["r"]]],[11,"source_mut","","",19,[[["self"]],["r"]]],[11,"from_str","","A convenience method to create an `XmlReader` from a…",18,[[["str"]],["eventreader"]]],[0,"writer","xml","Contains high-level interface for an events-based XML…",null,null],[3,"EmitterConfig","xml::writer","Emitter configuration structure.",null,null],[12,"line_separator","","Line separator used to separate lines in formatted output.…",1,null],[12,"indent_string","","A string which will be used for a single level of…",1,null],[12,"perform_indent","","Whether or not the emitted document should be indented.…",1,null],[12,"perform_escaping","","Whether or not characters in output events will be…",1,null],[12,"write_document_declaration","","Whether or not to write XML document declaration at the…",1,null],[12,"normalize_empty_elements","","Whether or not to convert elements with empty content to…",1,null],[12,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters.…",1,null],[12,"keep_element_names_stack","","Whether or not to keep element names to support…",1,null],[12,"autopad_comments","","Whether or not to automatically insert leading and…",1,null],[3,"EventWriter","","A wrapper around an `std::io::Write` instance which emits…",null,null],[4,"Error","","An error which may be returned by `XmlWriter` when writing…",null,null],[13,"Io","","An I/O error occured in the underlying `Write` instance.",20,null],[13,"DocumentStartAlreadyEmitted","","Document declaration has already been written to the…",20,null],[13,"LastElementNameNotAvailable","","The name of the last opening element is not available.",20,null],[13,"EndElementNameIsNotEqualToLastStartElementName","","The name of the last opening element is not equal to the…",20,null],[13,"EndElementNameIsNotSpecified","","End element name is not specified when it is needed, for…",20,null],[11,"new","xml","Creates an emitter configuration with default values.",1,[[],["emitterconfig"]]],[11,"create_writer","","Creates an XML writer with this configuration.",1,[[["write"]],[["eventwriter"],["write"]]]],[11,"line_separator","","Sets the field to the provided value and returns updated…",1,[[["into",["cow"]],["cow",["str"]]],["emitterconfig"]]],[11,"indent_string","","Sets the field to the provided value and returns updated…",1,[[["into",["cow"]],["cow",["str"]]],["emitterconfig"]]],[11,"perform_indent","","Sets the field to the provided value and returns updated…",1,[[["bool"]],["emitterconfig"]]],[11,"write_document_declaration","","Sets the field to the provided value and returns updated…",1,[[["bool"]],["emitterconfig"]]],[11,"normalize_empty_elements","","Sets the field to the provided value and returns updated…",1,[[["bool"]],["emitterconfig"]]],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated…",1,[[["bool"]],["emitterconfig"]]],[11,"keep_element_names_stack","","Sets the field to the provided value and returns updated…",1,[[["bool"]],["emitterconfig"]]],[11,"autopad_comments","","Sets the field to the provided value and returns updated…",1,[[["bool"]],["emitterconfig"]]],[0,"events","xml::writer","Contains `XmlEvent` datatype, instances of which are…",null,null],[3,"EndElementBuilder","xml::writer::events","",null,null],[3,"StartElementBuilder","","A builder for a starting element event.",null,null],[4,"XmlEvent","","A part of an XML output stream.",null,null],[13,"StartDocument","","Corresponds to XML document declaration.",21,null],[12,"version","xml::writer::events::XmlEvent","XML version.",22,null],[12,"encoding","","XML document encoding.",22,null],[12,"standalone","","XML standalone declaration.",22,null],[13,"ProcessingInstruction","xml::writer::events","Denotes an XML processing instruction.",21,null],[12,"name","xml::writer::events::XmlEvent","Processing instruction target.",23,null],[12,"data","","Processing instruction content.",23,null],[13,"StartElement","xml::writer::events","Denotes a beginning of an XML element.",21,null],[12,"name","xml::writer::events::XmlEvent","Qualified name of the element.",24,null],[12,"attributes","","A list of attributes associated with the element.",24,null],[12,"namespace","","Contents of the namespace mapping at this point of the…",24,null],[13,"EndElement","xml::writer::events","Denotes an end of an XML element.",21,null],[12,"name","xml::writer::events::XmlEvent","Optional qualified name of the element.",25,null],[13,"CData","xml::writer::events","Denotes CDATA content.",21,null],[13,"Comment","","Denotes a comment.",21,null],[13,"Characters","","Denotes character data outside of tags.",21,null],[11,"processing_instruction","","Returns an writer event for a processing instruction.",21,[[["str"],["option",["str"]]],["xmlevent"]]],[11,"start_element","","Returns a builder for a starting element.",21,[[["s"]],["startelementbuilder"]]],[11,"end_element","","Returns a builder for an closing element.",21,[[],["endelementbuilder"]]],[11,"cdata","","Returns a CDATA event.",21,[[["str"]],["xmlevent"]]],[11,"characters","","Returns a regular characters (PCDATA) event.",21,[[["str"]],["xmlevent"]]],[11,"comment","","Returns a comment event.",21,[[["str"]],["xmlevent"]]],[11,"name","","Sets the name of this closing element.",26,[[["n"]],["endelementbuilder"]]],[11,"attr","","Sets an attribute value of this element to the given string.",27,[[["str"],["n"]],["startelementbuilder"]]],[11,"ns","","Adds a namespace to the current namespace context.",27,[[["s1"],["s2"]],["startelementbuilder"]]],[11,"default_ns","","Adds a default namespace mapping to the current namespace…",27,[[["s"]],["startelementbuilder"]]],[6,"Result","xml::writer","A result type yielded by `XmlWriter`.",null,null],[11,"new","","Creates a new `EventWriter` out of an `std::io::Write`…",28,[[["w"]],["eventwriter"]]],[11,"new_with_config","","Creates a new `EventWriter` out of an `std::io::Write`…",28,[[["w"],["emitterconfig"]],["eventwriter"]]],[11,"write","","Writes the next piece of XML document according to the…",28,[[["self"],["e"]],["result"]]],[11,"inner_mut","","Returns a mutable reference to the underlying `Writer`.",28,[[["self"]],["w"]]],[11,"into_inner","","Unwraps this `EventWriter`, returning the underlying writer.",28,[[],["w"]]],[11,"from","xml","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","xml::name","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","xml::attribute","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","xml::common","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","xml::namespace","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"into_iter","","",30,[[],["i"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","xml::reader","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"into_iter","","",18,[[],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"into_iter","","",19,[[],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","xml::writer","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","xml::writer::events","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"position","xml::common","",6,[[["self"]],["textposition"]]],[11,"position","xml::reader","",17,[[["self"]],["textposition"]]],[11,"position","","Returns the position of the last event produced by the…",18,[[["self"]],["textposition"]]],[11,"from","xml::name","",2,[[["str"]],["name"]]],[11,"from","","",2,[[],["name"]]],[11,"from","","",3,[[["name"]],["ownedname"]]],[11,"from","xml::reader","",17,[[],["self"]]],[11,"from","","",17,[[["error"]],["self"]]],[11,"from","xml::writer","",20,[[["error"]],["emittererror"]]],[11,"from","xml::writer::events","",21,[[["str"]],["xmlevent"]]],[11,"from","","",21,[[["endelementbuilder"]],["xmlevent"]]],[11,"from","","",21,[[["startelementbuilder"]],["xmlevent"]]],[11,"extend","xml::namespace","",9,[[["self"],["t"]]]],[11,"extend","","",10,[[["self"],["t"]]]],[11,"extend","","",31,[[["self"],["t"]]]],[11,"into_iter","xml::reader","",18,[[],["events"]]],[11,"next","xml::namespace","",30,[[["self"]],[["urimapping"],["option",["urimapping"]]]]],[11,"next","xml::reader","",19,[[["self"]],[["option",["result"]],["result",["xmlevent"]]]]],[11,"clone","xml::name","",2,[[["self"]],["name"]]],[11,"clone","","",3,[[["self"]],["ownedname"]]],[11,"clone","xml::attribute","",4,[[["self"]],["attribute"]]],[11,"clone","","",5,[[["self"]],["ownedattribute"]]],[11,"clone","xml::common","",6,[[["self"]],["textposition"]]],[11,"clone","","",7,[[["self"]],["xmlversion"]]],[11,"clone","xml::namespace","",9,[[["self"]],["namespace"]]],[11,"clone","","",10,[[["self"]],["namespacestack"]]],[11,"clone","xml","",0,[[["self"]],["parserconfig"]]],[11,"clone","xml::reader","",11,[[["self"]],["xmlevent"]]],[11,"clone","","",17,[[["self"]],["error"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"clone","xml","",1,[[["self"]],["emitterconfig"]]],[11,"default","","",0,[[],["parserconfig"]]],[11,"default","","",1,[[],["emitterconfig"]]],[11,"eq","xml::name","",2,[[["name"],["self"]],["bool"]]],[11,"ne","","",2,[[["name"],["self"]],["bool"]]],[11,"eq","","",3,[[["ownedname"],["self"]],["bool"]]],[11,"ne","","",3,[[["ownedname"],["self"]],["bool"]]],[11,"eq","xml::attribute","",4,[[["attribute"],["self"]],["bool"]]],[11,"ne","","",4,[[["attribute"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["ownedattribute"]],["bool"]]],[11,"ne","","",5,[[["self"],["ownedattribute"]],["bool"]]],[11,"eq","xml::common","",6,[[["textposition"],["self"]],["bool"]]],[11,"ne","","",6,[[["textposition"],["self"]],["bool"]]],[11,"eq","","",7,[[["xmlversion"],["self"]],["bool"]]],[11,"eq","xml::namespace","",9,[[["self"],["namespace"]],["bool"]]],[11,"ne","","",9,[[["self"],["namespace"]],["bool"]]],[11,"eq","","",10,[[["namespacestack"],["self"]],["bool"]]],[11,"ne","","",10,[[["namespacestack"],["self"]],["bool"]]],[11,"eq","xml","",0,[[["self"],["parserconfig"]],["bool"]]],[11,"ne","","",0,[[["self"],["parserconfig"]],["bool"]]],[11,"eq","xml::reader","",11,[[["xmlevent"],["self"]],["bool"]]],[11,"ne","","",11,[[["xmlevent"],["self"]],["bool"]]],[11,"eq","","",17,[[["self"],["error"]],["bool"]]],[11,"ne","","",17,[[["self"],["error"]],["bool"]]],[11,"eq","","",16,[[["errorkind"],["self"]],["bool"]]],[11,"eq","xml","",1,[[["self"],["emitterconfig"]],["bool"]]],[11,"ne","","",1,[[["self"],["emitterconfig"]],["bool"]]],[11,"fmt","xml::name","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","xml::attribute","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","xml::common","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","xml::namespace","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","xml","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","xml::reader","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","xml::writer","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","xml","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","xml::writer::events","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","xml::name","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","xml::attribute","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","xml::common","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","xml::reader","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","xml::writer","",20,[[["formatter"],["self"]],["result"]]],[11,"hash","xml::name","",2,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","xml::attribute","",4,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"from_str","xml::name","Parses the given string slice into a qualified name.",3,[[["str"]],[["result",["ownedname"]],["ownedname"]]]],[11,"description","xml::reader","",17,[[["self"]],["str"]]],[11,"description","xml::writer","",20,[[["self"]],["str"]]]],"p":[[3,"ParserConfig"],[3,"EmitterConfig"],[3,"Name"],[3,"OwnedName"],[3,"Attribute"],[3,"OwnedAttribute"],[3,"TextPosition"],[4,"XmlVersion"],[8,"Position"],[3,"Namespace"],[3,"NamespaceStack"],[4,"XmlEvent"],[13,"StartDocument"],[13,"ProcessingInstruction"],[13,"StartElement"],[13,"EndElement"],[4,"ErrorKind"],[3,"Error"],[3,"EventReader"],[3,"Events"],[4,"Error"],[4,"XmlEvent"],[13,"StartDocument"],[13,"ProcessingInstruction"],[13,"StartElement"],[13,"EndElement"],[3,"EndElementBuilder"],[3,"StartElementBuilder"],[3,"EventWriter"],[3,"ReprDisplay"],[3,"NamespaceStackMappings"],[3,"CheckedTarget"]]};
searchIndex["xml_analyze"] = {"doc":"","i":[[5,"main","xml_analyze","",null,[[]]]],"p":[]};
addSearchOptions(searchIndex);initSearch(searchIndex);